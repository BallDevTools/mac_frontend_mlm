<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Test PJ</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
    <script
      src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js"
      type="application/javascript"
    ></script>
  </head>

  <body>
    <nav class="navbar navbar-expand-lg bg-body-tertiary">
      <div class="container-fluid">
        <a class="navbar-brand" href="#">Navbar</a>
        <button
          class="navbar-toggler"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="#navbarSupportedContent"
          aria-controls="navbarSupportedContent"
          aria-expanded="false"
          aria-label="Toggle navigation"
        >
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent">
          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <li class="nav-item">
              <a class="nav-link active" aria-current="page" href="#">Home</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">Link</a>
            </li>
          </ul>

          <button
            class="btn btn-outline-success"
            type="submit"
            id="connectWalletButton"
          >
            Connect Wallet
          </button>
        </div>
      </div>
    </nav>
    <div class="container">
      <div class="row py-3">
        <h1>Customer Menu</h1>
        <button
          type="button"
          class="btn btn-outline-secondary m-2"
          id="AddLevel"
        >
          Add Level
        </button>
        <button
          type="button"
          class="btn btn-outline-secondary m-2"
          id="UpdateLevelPrice"
        >
          Update Level Price
        </button>
        <button
          type="button"
          class="btn btn-outline-secondary m-2"
          id="Withdraw"
        >
          Withdraw
        </button>
        <button type="button" class="btn btn-outline-info m-2" id="Balance">
          Check Balance
        </button>
        <button
          type="button"
          class="btn btn-outline-info m-2"
          id="GetMemberInfo"
        >
          GetMemberInfo
        </button>
        <button
          type="button"
          class="btn btn-outline-info m-2"
          id="GetTotalMember"
        >
          GetTotalMember
        </button>
        <button type="button" class="btn btn-outline-info m-2" id="Level">
          Levels
        </button>
        <button type="button" class="btn btn-outline-info m-2" id="Members">
          Members
        </button>
        <button type="button" class="btn btn-outline-info m-2" id="Owner">
          Owner
        </button>
        <button type="button" class="btn btn-outline-info m-2" id="TotalMember">
          TotalMember
        </button>
        <div class="input-group m-3">
          <button class="btn btn-outline-warning" type="button" id="BuyLevel">
            BuyLevel
          </button>
          <input
            type="number"
            class="form-control"
            name="buyLevel"
            value=""
            id="inputBuylevel"
            placeholder="desiredLevel"
          />
        </div>
        <div class="input-group m-3">
          <button class="btn btn-outline-warning" type="button" id="JoinLevel">
            JoinLevel
          </button>
          <input
            type="text"
            class="form-control"
            name="referrerAddress"
            id="inputReferrerAddress"
            value=""
            placeholder="referrerAddress"
          />
          <input
            type="text"
            class="form-control"
            name="desiredLevel"
            id="inputJoinLevel"
            value=""
            placeholder="desiredLevel"
          />
        </div>
      </div>
    </div>

    <input type="text" id="amount" placeholder="Amount in Ether" />
    <button onclick="sendEther()">Send Ether</button>

    <script src="app.js"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"
      integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/web3/4.7.0/web3.min.js"
      integrity="sha512-Fb4046VCVYeHkcOot1tILxjEvhotfjmk2Zo54zEJopE4BskdPALUvjzjnOttxbZ/WlvKUOgCHTHy42Z5OxRaHw=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>

    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.8/axios.min.js"
      integrity="sha512-PJa3oQSLWRB7wHZ7GQ/g+qyv6r4mbuhmiDb8BjSFZ8NZ2a42oTtAq5n0ucWAwcQDlikAtkub+tPVCw4np27WCg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script>
      if (typeof window.ethereum !== "undefined") {
        console.log("MetaMask is installed!");
      }
      async function connectWallet() {
        try {
          const accounts = await window.ethereum.request({
            method: "eth_requestAccounts",
          });
          localStorage.setItem("Address_Wallet", accounts[0]);
          console.log("Connected", accounts[0]);
        } catch (error) {
          console.error("Error connecting to MetaMask", error);
        }
      }
      document
        .getElementById("connectWalletButton")
        .addEventListener("click", connectWallet);
    </script>
    <!-- <script>
      document.addEventListener("DOMContentLoaded", () => {
        const button = document.getElementById("JoinLevel");
        button.addEventListener("click", async () => {
          if (typeof window.ethereum !== "undefined") {
            const provider = new ethers.providers.Web3Provider(window.ethereum);
            await provider.send("eth_requestAccounts", []);
            const signer = provider.getSigner();
            const contractABI = [
              {
                inputs: [],
                stateMutability: "nonpayable",
                type: "constructor",
              },
              {
                inputs: [],
                name: "checkBalance",
                outputs: [
                  {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                  },
                ],
                stateMutability: "view",
                type: "function",
              },
              {
                inputs: [
                  {
                    internalType: "address",
                    name: "referrerAddress",
                    type: "address",
                  },
                  {
                    internalType: "uint256",
                    name: "desiredLevel",
                    type: "uint256",
                  },
                ],
                name: "joinLevel",
                outputs: [],
                stateMutability: "payable",
                type: "function",
              },
              {
                inputs: [
                  {
                    internalType: "uint256",
                    name: "",
                    type: "uint256",
                  },
                ],
                name: "levels",
                outputs: [
                  {
                    internalType: "uint256",
                    name: "price",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "maxMembers",
                    type: "uint256",
                  },
                ],
                stateMutability: "view",
                type: "function",
              },
              {
                inputs: [
                  {
                    internalType: "address",
                    name: "",
                    type: "address",
                  },
                ],
                name: "members",
                outputs: [
                  {
                    internalType: "address",
                    name: "referrer",
                    type: "address",
                  },
                  {
                    internalType: "uint256",
                    name: "level",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "totalPaid",
                    type: "uint256",
                  },
                ],
                stateMutability: "view",
                type: "function",
              },
              {
                inputs: [],
                name: "owner",
                outputs: [
                  {
                    internalType: "address",
                    name: "",
                    type: "address",
                  },
                ],
                stateMutability: "view",
                type: "function",
              },
            ];
            const contractAddress =
              "0x061BA659cD50704b7A8177815FDC789c9c137906";

            // สร้างอินสแตนซ์ของสัญญา
            const contract = new ethers.Contract(
              contractAddress,
              contractABI,
              signer
            );

            try {
              let referrer = $("#inputBuylevel").val();
              let level = $("#inputJoinLevel").val();

              // เรียกใช้ฟังก์ชันของสัญญา
              const transactionResponse = await contract.joinLevel(
                referrer,
                level
              );
              console.log("Transaction response:", transactionResponse);
            } catch (error) {
              console.error("Error:", error);
            }
          } else {
            console.log("Please install MetaMask!");
          }
        });
      });
    </script> -->

    <script>
      // Assuming there's a global web3 instance available,
      // e.g., injected by MetaMask or another provider

      async function sendEther() {
        if (typeof window.ethereum !== "undefined") {
          await window.ethereum.enable();
          const web3 = new Web3(window.ethereum);
          const contractAddress = "0x061BA659cD50704b7A8177815FDC789c9c137906";
          const contractABI = [
            {
              inputs: [],
              stateMutability: "nonpayable",
              type: "constructor",
            },
            {
              inputs: [],
              name: "checkBalance",
              outputs: [
                {
                  internalType: "uint256",
                  name: "",
                  type: "uint256",
                },
              ],
              stateMutability: "view",
              type: "function",
            },
            {
              inputs: [
                {
                  internalType: "address",
                  name: "referrerAddress",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "desiredLevel",
                  type: "uint256",
                },
              ],
              name: "joinLevel",
              outputs: [],
              stateMutability: "payable",
              type: "function",
            },
            {
              inputs: [
                {
                  internalType: "uint256",
                  name: "",
                  type: "uint256",
                },
              ],
              name: "levels",
              outputs: [
                {
                  internalType: "uint256",
                  name: "price",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "maxMembers",
                  type: "uint256",
                },
              ],
              stateMutability: "view",
              type: "function",
            },
            {
              inputs: [
                {
                  internalType: "address",
                  name: "",
                  type: "address",
                },
              ],
              name: "members",
              outputs: [
                {
                  internalType: "address",
                  name: "referrer",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "level",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "totalPaid",
                  type: "uint256",
                },
              ],
              stateMutability: "view",
              type: "function",
            },
            {
              inputs: [],
              name: "owner",
              outputs: [
                {
                  internalType: "address",
                  name: "",
                  type: "address",
                },
              ],
              stateMutability: "view",
              type: "function",
            },
          ];

          const contract = new web3.eth.Contract(contractABI, contractAddress);
          const contractFunction = "joinLevel";
          const etherAmount = document.getElementById("amount").value;
          const accounts = await web3.eth.getAccounts();
          const currentAccount = accounts[0];
          console.log(currentAccount);
          const valueInWei = web3.utils.toWei(etherAmount, "ether");

          contract.methods[contractFunction]()
            .send({
              from: currentAccount,
              value: valueInWei,
            })
            .then((tx) => {
              console.log(`Transaction: `, tx);
            })
            .catch((error) => {
              console.error("Transaction failed:", error);
            });
        } else {
          console.log("Ethereum wallet is not available");
        }
      }
    </script>
  </body>
</html>
