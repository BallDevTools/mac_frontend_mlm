<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MML Contract Interface with Number Decoding</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.5.2/web3.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
        }
        .container {
            background-color: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            text-align: center;
            max-width: 800px;
            width: 100%;
        }
        button, input[type="number"] {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 10px 20px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 14px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 5px;
        }
        input[type="number"] {
            background-color: white;
            color: black;
            border: 1px solid #4CAF50;
        }
        #functionList, #status, #debug {
            margin-top: 1rem;
            text-align: left;
            white-space: pre-wrap;
            word-break: break-word;
        }
        #functionList {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
        }
        .function-button {
            margin: 5px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>MML Contract Interface with Number Decoding</h1>
        <div id="functionList"></div>
        <div>
            <input type="number" id="numberInput" placeholder="Enter a number">
            <button id="decodeButton">Decode Number</button>
        </div>
        <div id="status"></div>
        <h2>Debug Information:</h2>
        <div id="debug"></div>
    </div>

    <script>
        const contractAddress = '0x84d27cc05B7EC1BBf3e747918C0F3bA67B2f3BD2';
        const contractABI = [
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [],
		"name": "checkBalance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "referrerAddress",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "desiredLevel",
				"type": "uint256"
			}
		],
		"name": "joinLevel",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "levels",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "price",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "maxMembers",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "members",
		"outputs": [
			{
				"internalType": "address",
				"name": "referrer",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "level",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "totalPaid",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];

        let web3;
        let contract;
        let userAccount;

        function updateDebugInfo(message) {
            const debugElement = document.getElementById('debug');
            debugElement.textContent += message + '\n';
        }

        function createFunctionButton(functionName) {
            const button = document.createElement('button');
            button.textContent = functionName;
            button.classList.add('function-button');
            button.addEventListener('click', () => callContractFunction(functionName));
            return button;
        }

        async function callContractFunction(functionName) {
            try {
                updateDebugInfo(`Calling function: ${functionName}`);
                const method = contract.methods[functionName]();
                let result;
                if (method.estimateGas) {
                    const gasEstimate = await method.estimateGas({from: userAccount});
                    result = await method.send({ from: userAccount, gas: gasEstimate });
                } else {
                    result = await method.call({ from: userAccount });
                }
                updateDebugInfo(`Function ${functionName} result: ${JSON.stringify(result)}`);
                document.getElementById('status').textContent = `Function ${functionName} called successfully`;
                return result;
            } catch (error) {
                console.error(`Error calling ${functionName}:`, error);
                updateDebugInfo(`Error calling ${functionName}: ${error.message}`);
                document.getElementById('status').textContent = `Error calling ${functionName}. See debug information.`;
            }
        }

        function decodeNumber(encodedNumber) {
            // Simple decoding: reverse the number
            return parseInt(encodedNumber.toString().split('').reverse().join(''));
        }

        window.addEventListener('load', async () => {
            updateDebugInfo('Page loaded. Checking for Web3...');
            if (typeof window.ethereum !== 'undefined') {
                web3 = new Web3(window.ethereum);
                updateDebugInfo('Web3 detected.');
                try {
                    await window.ethereum.enable();
                    const accounts = await web3.eth.getAccounts();
                    userAccount = accounts[0];
                    updateDebugInfo(`Connected account: ${userAccount}`);
                    
                    contract = new web3.eth.Contract(contractABI, contractAddress);
                    updateDebugInfo('Contract instance created.');
                    
                    const functionNames = Object.keys(contract.methods).filter(key => typeof contract.methods[key] === 'function');
                    updateDebugInfo(`Available functions: ${functionNames.join(', ')}`);
                    
                    const functionListElement = document.getElementById('functionList');
                    functionNames.forEach(functionName => {
                        functionListElement.appendChild(createFunctionButton(functionName));
                    });

                    document.getElementById('decodeButton').addEventListener('click', async () => {
                        const input = document.getElementById('numberInput').value;
                        if (input) {
                            const decodedNumber = decodeNumber(input);
                            updateDebugInfo(`Decoded number: ${input} -> ${decodedNumber}`);
                            document.getElementById('status').textContent = `Decoded number: ${decodedNumber}`;
                        } else {
                            updateDebugInfo('No number entered for decoding');
                            document.getElementById('status').textContent = 'Please enter a number to decode';
                        }
                    });

                } catch (error) {
                    console.error("User denied account access or error occurred", error);
                    updateDebugInfo(`Error: ${error.message}`);
                }
            } else {
                updateDebugInfo('Non-Ethereum browser detected. Consider trying MetaMask!');
            }
        });
    </script>
</body>
</html>