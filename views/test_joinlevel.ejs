<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Join Level Form</title>
    <script src="https://cdn.jsdelivr.net/npm/web3@1.5.2/dist/web3.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 500px;
            margin: 0 auto;
            padding: 20px;
        }
        form {
            display: flex;
            flex-direction: column;
        }
        label, input, button {
            margin-bottom: 10px;
        }
        button {
            cursor: pointer;
        }
    </style>
</head>
<body>
    <h1>Join Level</h1>
    <form id="joinLevelForm">
        <label for="referrerAddress">Referrer Address:</label>
        <input type="text" id="referrerAddress" required placeholder="0x...">

        <label for="desiredLevel">Desired Level:</label>
        <input type="number" id="desiredLevel" min="1" max="10" required>

        <label for="amount">Amount to Send (in ETH):</label>
        <input type="number" id="amount" step="0.01" required>

        <button type="submit">Join Level</button>
    </form>
    <p id="status"></p>

    <script>
        const contractABI = [
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [],
		"name": "checkBalance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "referrerAddress",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "desiredLevel",
				"type": "uint256"
			}
		],
		"name": "joinLevel",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "levels",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "price",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "maxMembers",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"name": "members",
		"outputs": [
			{
				"internalType": "address",
				"name": "referrer",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "level",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "totalPaid",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];
        const contractAddress = "0x84d27cc05B7EC1BBf3e747918C0F3bA67B2f3BD2";

        async function joinLevel(event) {
            event.preventDefault();
            const statusElement = document.getElementById('status');

            if (typeof window.ethereum === 'undefined') {
                statusElement.textContent = 'MetaMask is not installed. Please install it to use this app.';
                return;
            }

            const referrerAddress = document.getElementById('referrerAddress').value;
            const desiredLevel = document.getElementById('desiredLevel').value;
            const amount = document.getElementById('amount').value;

            try {
                await window.ethereum.request({ method: 'eth_requestAccounts' });
                const web3 = new Web3(window.ethereum);
                const contract = new web3.eth.Contract(contractABI, contractAddress);

                const accounts = await web3.eth.getAccounts();
                const account = accounts[0];

                statusElement.textContent = 'Sending transaction...';
                const tx = await contract.methods.joinLevel(referrerAddress, desiredLevel).send({
                    from: account,
                    value: web3.utils.toWei(amount, 'ether')
                });

                statusElement.textContent = 'Transaction sent. Waiting for confirmation...';
                console.log('Transaction hash:', tx.transactionHash);
                statusElement.textContent = 'Successfully joined level ' + desiredLevel;
            } catch (error) {
                console.error('Error:', error);
                statusElement.textContent = 'Error: ' + error.message;
            }
        }

        document.getElementById('joinLevelForm').addEventListener('submit', joinLevel);
    </script>
</body>
</html>